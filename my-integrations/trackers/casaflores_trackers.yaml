# TODO: check composite trackers for better managemenet of multiple trackers
# https://github.com/pnbruckner/ha-composite-tracker?tab=readme-ov-file

group:
  casaflores_residents:
    name: CasaFlores Residents
    entities:
      - person.tahi
      - person.noe

#require_movement (Optional): true or false. If true, will skip update from a GPS-based tracker if it has not moved. Specifically, if circle defined by new GPS coordinates and accuracy overlaps circle defined by previous GPS coordinates and accuracy then update will be ignored.
#driving_speed (Optional): Defines a driving speed threshold (in MPH or KPH, depending on general unit system setting.) If set, and current speed is at or above this value, and tracker is not in a zone, then the state of the tracker will be set to driving.
# Note: NO 'homeassistant:' or 'packages:' header here
switch:
  - platform: template  # This is the "Legacy" format
    switches:
      casaflores_presence_switch_ha:
        unique_id: casaflores_presence_switch_ha
        friendly_name: "HA CasaFlores Presence Switch"
        value_template: >
          {{ is_state('group.casaflores_residents', 'home') }}
        turn_on:
          service: system_log.write
          data:
            message: "CasaFlores Presence Switch turn_on called (read-only switch)"
            level: info
        turn_off:
          service: system_log.write
          data:
            message: "CasaFlores Presence Switch turn_off called (read-only switch)"
            level: info


# who is at casa...
# chaks persons for ome state
# id: sensor.casaflores_occupancy 
# return: none home, some home, all home
template:
  - sensor:
      - name: "CasaFlores Occupancy" 
        unique_id: casaflores_occupancy # Unique ID is required for the UI, but is set by name
        # instead od strict query we use in so it works with CasaMolino EXT, for example
        state: >-
          {% set items = states.person %}
          {% set all = items|length %}
          {% set home = items|map(attribute="state")|select("equalto","home")|list|length %}
          {{ "empty" if home == 0 else "occupied" }}
        icon: >-
          {% if is_state('casaflores_occupancy', 'none') %}
            mdi:home-circle-outline
          {% else %}
            mdi:home-circle
          {% endif %}
        attributes:
          occupancy: >
            {% set items = states.person %}
            {% set all = items|length %}
            {% set home = items|map(attribute="state")|select("equalto","home")|list|length %}
            {{ "empty home" if home == 0 else "all home" if home == all else "some home" }}
          are_home: >
            {{ expand('group.casaflores_residents')|selectattr('state','eq','home')|map(attribute='name')|list|join(',') }}
          are_away: >
            {{ expand('group.casaflores_residents')|rejectattr('state', 'eq', 'home')|map(attribute='name')|default('NONE')|list|join(',') }}
          are_home_list: >
            {{ expand('group.casaflores_residents')|selectattr('state','eq','home')|map(attribute='entity_id')|list }}
  
  # Is casa empty or someone in it??
  - trigger:
      - platform: state
        entity_id: sensor.casaflores_occupancy
    # device_class: door added via customize for new HA versions templating.
    binary_sensor:
      - name: "CasaFlores empty"
        state: >
          {% if is_state('sensor.casaflores_occupancy','empty home') %}
          on
          {% else %}
          off
          {% endif %}
        unique_id: casaflores_empty

# user variables from var integrationnin case we chage the wifi network name
# wifi names are in variables.yaml
# template:
#   - trigger:
#       - platform: state
#         entity_id: sensor.tahi_phone_wi_fi_connection
#       - platform: homeassistant
#         event: start
#       - platform: event
#         event_type: event_template_reloaded
#     sensor:
#       - name: "Tahi Phone Wifi connected CasaFlores"
#         unique_id: tahi_phone_wifi_connected_casaflores # Unique ID is required for the UI, but is set by name
#         # instead od strict query we use in so it works with CasaMolino EXT, for example
#         state: >-
#           {% if states('sensor.tahi_phone_wi_fi_connection') == states('var.wifi_casaflores')
#           or states('sensor.tahi_phone_wi_fi_connection') in states('var.wifi_casaflores_array') %}
#           connected
#           {% else %}
#           disconnected
#           {% endif %}
# # try adding an attribute that changes so device tracker updates on restart
#         attributes:
#          ha_rand: >-
#            random-{{ range(1, 51) | random }}
#         icon: >-
#           {% if states('sensor.tahi_phone_wi_fi_connection') == states('var.wifi_casaflores')
#           or states('sensor.tahi_phone_wi_fi_connection') in states('var.wifi_casaflores_array') %}
#             mdi:home-account
#           {% else %}
#             mdi:home-off-outline
#           {% endif %}
#   - trigger:
#       - platform: state
#         entity_id: sensor.noe_pixel_8a_wi_fi_connection
#       - platform: homeassistant
#         event: start
#       - platform: event
#         event_type: event_template_reloaded
#     sensor:
#       - name: "Noe phone Wifi connected CasaFlores" 
#         unique_id: noe_phone_wifi_connected_casaflores # Unique ID is required for the UI, but is set by name
#         # instead od strict query we use in so it works with CasaMolino EXT, for example
#         state: >-
#           {% if states('sensor.noe_pixel_8a_wi_fi_connection') == states('var.wifi_casaflores')
#           or states('sensor.noe_pixel_8a_wi_fi_connection') in states('var.wifi_casaflores_array') %}
#           connected
#           {% else %}
#           disconnected
#           {% endif %}
#         attributes:
#          ha_rand: >-
#            random-{{ range(1, 51) | random }} 
#         icon: >-
#           {% if states('sensor.noe_pixel_8a_wi_fi_connection') == states('var.wifi_casaflores')
#           or states('sensor.noe_pixel_8a_wi_fi_connection') in states('var.wifi_casaflores_array') %}
#             mdi:home-account
#           {% else %}
#             mdi:home-off-outline
#           {% endif %}
          

# additional device tracker dynamically created
# based on binary_sensor presence template sensors to defeat Unifi wrapper logic
# https://community.home-assistant.io/t/is-there-a-way-to-use-a-binary-sensor-as-an-device-tracker/250665/2?u=tahiche
# We trun wifi-connected sensor into device_tracker so we can assign to person entity... 

# Equivalent:
# {{ trigger.to_state.state=='connected' }} same as {{ is_state(trigger.entity_id, 'connected') }}"

#{{ states('sensor.tahi_phone_wifi_connected_casaflores') }}
# automation:
#   - id: presence_based_wifi_home_noetahi
#     alias: "Update presence Home wifi device tracker  Tahi and Noe"
#     mode: queued
#     trigger:
#       - platform: state
#         entity_id: sensor.tahi_phone_wifi_connected_casaflores
#       - platform: state
#         entity_id: sensor.noe_phone_wifi_connected_casaflores
#     condition: []
#     action:
#       - service: device_tracker.see
#         data:
#           dev_id: >
#             {% if trigger.entity_id == 'sensor.tahi_phone_wifi_connected_casaflores' %}
#               tracker_wifi_tahi
#             {% elif trigger.entity_id == 'sensor.noe_phone_wifi_connected_casaflores' %}
#               tracker_wifi_noe
#             {% else %}
#               tracker_wifi_unknown
#              {% endif %}
#           location_name: >
#             {% if is_state(trigger.entity_id, 'connected') %}
#             home
#             {%- else -%}
#             not_home
#             {%- endif -%}
            
#           source_type: "router"

      #- service: persistent_notification.create
      #  data_template:
      #    title: >
      #        {% if trigger.entity_id == 'sensor.tahi_phone_wifi_connected_casaflores' %}
      #          Tahi WiFi Tracker Debug
      #        {% else %}
      #          Noe WiFi Tracker Debug
      #        {% endif %}
      #    message: > 
      #      {% set tracker = 'tracker_wifi_tahi' if trigger.entity_id == 'sensor.tahi_phone_wifi_connected_casaflores' else 'tracker_wifi_noe' %}
      #      "Tracker state for {{ tracker }} changed to:  {{ trigger.to_state.state }} connected?? {{ trigger.to_state.state=='connected' }}  {{ is_state(trigger.entity_id, 'connected') }}"
      #    notification_id: "automation_wifi_debug_{{ now().strftime('%Y%m%d%H%M%S') }}"
      


  #- id: presence_based_wifi_home_tahi
  #  alias: "Update presence Home device tracker Tahi"
  #  mode: queued
  #  trigger:
  #    - platform: state
  #      entity_id: sensor.tahi_phone_wifi_connected_casaflores
  #  condition: []
  #  action:
  #    - service: device_tracker.see
  #      data:
  #        dev_id: "tracker_wifi_tahi"
  #        location_name: >
  #          
  #          {% if trigger.to_state.state=='connected' %}
  #          home
  #          {%- else -%}
  #          not_home
  #          {%- endif -%}
  #        source_type: "router"
  #    - service: persistent_notification.create
  #      data:
  #        title: "Tahi WiFi Tracker Debug"
  #        message: "Tracker state changed to:  {{ trigger.to_state.state }} connected?? {{ trigger.to_state.state=='connected' }}  {{ is_state(trigger.entity_id, 'connected') }}"
  #        notification_id: "tahi_wifi_debug_{{ now().strftime('%Y%m%d%H%M%S') }}"
  #      
  #- id: presence_based_wifi_home_noe
  #  alias: "Update presence Home device tracker Noe"
  #  mode: queued
  #  trigger:
  #    - platform: state
  #      entity_id: sensor.noe_phone_wifi_connected_casaflores
  #  condition: []
  #  action:
  #    - service: device_tracker.see
  #      data:
  #        dev_id: "tracker_wifi_noe"
  #        location_name: "{{ 'home' if is_state(trigger.to_state.state, 'connected') else 'not_home' }}"
  #        source_type: "router"